from cmath import exp

import numpy as np
from matplotlib import pyplot as plt
from scipy.integrate import solve_ivp

import utills.functions
from floquet_line_model.floquet_line_MS_CPW import SuperConductingFloquetLine
from model_inputs.cpw_inputs import CPWInputs
from super_conductor_model.super_conductor_model import SuperConductivity
from transmission_line_models.cpw.super_conducting_cpw_model import SuperConductingCPWLine

json_inputs = {'SC': {'Er': 11.44, 'Height': 0.0, 'Ts': 35.0, 'Ground Thickness': 0.0,
                      'Super Conductor Operation Temperature': 4.0, 'Super Conductor Critical Temperature': 14.7,
                      'Super Conductor Critical Current': 0.0, 'Super Conductor Normal Resistivity': 100.0,
                      'Super Conductor Tangent Delta': 0.0},
               'Dimensions': {'loads': [['60', '3.4'], ['60', '3.4'], ['50', '3.4']], 'Unit Cell Length': 4.734,
                              'Central Line Width': 1.0, 'D0': 1.578, 'S': 1.0},
               'Frequency Range': {'Start Frequency': 0.0, 'End Frequency': 40.0, 'Resolution': 1000.0},
               'gain_models': {'Signal Amplitude': 0.0, 'Idler Amplitude': 0.0, 'Pump Amplitude': 0.0,
                               'Pump Frequency': 0.0}}

inputs = CPWInputs(json_inputs)

super_conductivity_model = SuperConductivity(inputs.op_temp, inputs.crit_temp, inputs.normal_resistivity)

central_line_model = SuperConductingCPWLine(inputs.central_line_width, inputs.ground_spacing,
                                            inputs.line_thickness, inputs.er, inputs.tangent_delta, inputs.crit_current)
load_line_models = [SuperConductingCPWLine(load_width, inputs.ground_spacing, inputs.line_thickness, inputs.er,
                                           inputs.tangent_delta, inputs.crit_current) for load_width in
                    inputs.load_widths]

floquet_line = SuperConductingFloquetLine(inputs.unit_cell_length, inputs.D0, inputs.load_D_vals, load_line_models,
                                          central_line_model, super_conductivity_model, inputs.central_line_width,
                                          inputs.load_widths, inputs.line_thickness)
unit_cell_length = floquet_line.unit_cell.unit_cell_length


def ODE_model_1(z, init_amplitudes, beta_s, beta_i, beta_p, delta_betaD, I_Star):
    # signal-idler-pump equations for N = 3
    #
    # A1, A2, A3 = init_amplitudes
    #
    # f01, f02, f03 = [3, 3, 3]
    # f11, f12, f13 = [1, 2, 2]
    # f21, f22, f23 = [2, 1, 2]
    # f31, f32, f33 = [2, 2, 1]
    # f51, f52, f53 = [1, 1, 2]
    #
    # Dbeta = beta_s + beta_i - 2 * beta_p
    #
    # fun1 = -1j * beta_s / (3 * 8 * I_star ** 2) \
    #        * (f01 * (A1 * (f11 * np.abs(A1) ** 2
    #                        + f21 * np.abs(A2) ** 2
    #                        + f31 * np.abs(A3) ** 2)
    #                  + f51 * np.exp(1j * Dbeta * z) * np.conj(A2) * A3 ** 2))
    #
    # fun2 = -1j * beta_i / (3 * 8 * I_star ** 2) \
    #        * (f02 * (A2 * (f12 * np.abs(A1) ** 2
    #                        + f22 * np.abs(A2) ** 2
    #                        + f32 * np.abs(A3) ** 2)
    #                  + f52 * np.exp(1j * Dbeta * z) * np.conj(A1) * A3 ** 2))
    #
    # fun3 = -1j * beta_p / (3 * 8 * I_star ** 2) \
    #        * (f03 * (A3 * (f13 * np.abs(A1) ** 2
    #                        + f23 * np.abs(A2) ** 2
    #                        + f33 * np.abs(A3) ** 2)
    #                  + f53 * np.exp(-1j * Dbeta * z) * np.conj(A3) * A1 * A2))
    #
    # return [fun1, fun2, fun3]

    amp_S, amp_I, amp_P = init_amplitudes
    abs_ampS_sqrd = abs(amp_S) ** 2
    abs_ampI_sqrd = abs(amp_I) ** 2
    abs_ampP_sqrd = abs(amp_P) ** 2

    I_Star_sqrd = I_Star ** 2

    j_db1_z = 1j * delta_betaD * z

    eight_is_sqred = (8 * I_Star_sqrd)

    As = ((-1j * beta_s / eight_is_sqred)
          * (amp_S * (abs_ampS_sqrd + 2 * abs_ampI_sqrd + 2 * abs_ampP_sqrd)
             + amp_I.conjugate() * amp_P ** 2 * exp(j_db1_z)))

    Ai = ((-1j * beta_i / eight_is_sqred)
          * (amp_I * (2 * abs_ampS_sqrd + abs_ampI_sqrd + 2 * abs_ampP_sqrd)
             + amp_S.conjugate() * amp_P ** 2 * exp(j_db1_z)))

    Ap = ((-1j * beta_p / eight_is_sqred)
          * (amp_P * (2 * abs_ampS_sqrd + 2 * abs_ampI_sqrd + abs_ampP_sqrd)
             + 2 * amp_P.conjugate() * amp_S * amp_I * exp(-j_db1_z)))

    return [As, Ai, Ap]


################################################################################################################################################

def get_betas_d(floquet_line, freq_range):
    return np.array([floquet_line.simulate(f)[1] for f in freq_range])


def __get_closest_betas_at_given_freq(master, targets, betas_unfolded):
    # because frequency_range - PUMP_FREQUENCY could result in needing beta values at frequencies that were not
    # simulated we find the closes frequency that was simulated to the one that was not and use that beta

    sorted_keys = np.argsort(master)
    return betas_unfolded[sorted_keys[np.searchsorted(master, targets, sorter=sorted_keys)]]


################################## GAIN PARAMS #######################################

n_unitcells = 150
PUMP_FREQUENCY = utills.functions.toGHz(11.33)

I_star = 1  # todo i star val ??

as0 = 1e-7 * I_star + 0j
ai0 = 0 + 0j
ap0 = 2 * .1 * I_star + 0j

inital_amplitudes = [as0, ai0, ap0]

########################################################################################

# 1) get frequencys to simulate over

frequency_range = np.linspace(0, 1e9*22.7, 1000)

# 2) simulate batas and unfold betas*D, then divid by unitcell len to get beta
betas_unfolded = utills.functions.beta_unfold(get_betas_d(floquet_line, frequency_range)) / unit_cell_length
jav_fr = 1e9 * np.array(
    [1.0, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8, 1.85, 1.9, 1.95,
     2.0, 2.05, 2.1, 2.15, 2.2, 2.25, 2.3, 2.35, 2.4, 2.45, 2.5, 2.55, 2.6, 2.65, 2.7, 2.75, 2.8, 2.85, 2.9, 2.95,
     3.0, 3.05, 3.1, 3.15, 3.2, 3.25, 3.3, 3.35, 3.4, 3.45, 3.5, 3.55, 3.6, 3.65, 3.7, 3.75, 3.8, 3.85, 3.9, 3.95,
     4.0, 4.05, 4.1, 4.15, 4.2, 4.25, 4.3, 4.35, 4.4, 4.45, 4.5, 4.55, 4.6, 4.65, 4.7, 4.75, 4.8, 4.85, 4.9, 4.95,
     5.0, 5.05, 5.1, 5.15, 5.2, 5.25, 5.3, 5.35, 5.4, 5.45, 5.5, 5.55, 5.6, 5.65, 5.7, 5.75, 5.8, 5.85, 5.9, 5.95,
     6.0, 6.05, 6.1, 6.15, 6.2, 6.25, 6.3, 6.35, 6.4, 6.45, 6.5, 6.55, 6.6, 6.65, 6.7, 6.75, 6.8, 6.85, 6.9, 6.95,
     7.0, 7.05, 7.1, 7.15, 7.2, 7.25, 7.3, 7.35, 7.4, 7.45, 7.5, 7.55, 7.6, 7.65, 7.7, 7.75, 7.8, 7.85, 7.9, 7.95,
     8.0, 8.05, 8.1, 8.15, 8.2, 8.25, 8.3, 8.35, 8.4, 8.45, 8.5, 8.55, 8.6, 8.65, 8.7, 8.75, 8.8, 8.85, 8.9, 8.95,
     9.0, 9.05, 9.1, 9.15, 9.2, 9.25, 9.3, 9.35, 9.4, 9.45, 9.5, 9.55, 9.6, 9.65, 9.7, 9.75, 9.8, 9.85, 9.9, 9.95,
     10.0, 10.05, 10.1, 10.15, 10.2, 10.25, 10.3, 10.35, 10.4, 10.45, 10.5, 10.55, 10.6, 10.65, 10.7, 10.75, 10.8,
     10.85, 10.9, 10.95, 11.0, 11.05, 11.1, 11.15, 11.2, 11.25, 11.3, 11.35, 11.4, 11.45, 11.5, 11.55, 11.6, 11.65,
     11.7, 11.75, 11.8, 11.85, 11.9, 11.95, 12.0, 12.05, 12.1, 12.15, 12.2, 12.25, 12.3, 12.35, 12.4, 12.45, 12.5,
     12.55, 12.6, 12.65, 12.7, 12.75, 12.8, 12.85, 12.9, 12.95, 13.0, 13.05, 13.1, 13.15, 13.2, 13.25, 13.3, 13.35,
     13.4, 13.45, 13.5, 13.55, 13.6, 13.65, 13.7, 13.75, 13.8, 13.85, 13.9, 13.95, 14.0, 14.05, 14.1, 14.15, 14.2,
     14.25, 14.3, 14.35, 14.4, 14.45, 14.5, 14.55, 14.6, 14.65, 14.7, 14.75, 14.8, 14.85, 14.9, 14.95, 15.0, 15.05,
     15.1, 15.15, 15.2, 15.25, 15.3, 15.35, 15.4, 15.45, 15.5, 15.55, 15.6, 15.65, 15.7, 15.75, 15.8, 15.85, 15.9,
     15.95, 16.0, 16.05, 16.1, 16.15, 16.2, 16.25, 16.3, 16.35, 16.4, 16.45, 16.5, 16.55, 16.6, 16.65, 16.7, 16.75,
     16.8, 16.85, 16.9, 16.95, 17.0, 17.05, 17.1, 17.15, 17.2, 17.25, 17.3, 17.35, 17.4, 17.45, 17.5, 17.55, 17.6,
     17.65, 17.7, 17.75, 17.8, 17.85, 17.9, 17.95, 18.0, 18.05, 18.1, 18.15, 18.2, 18.25, 18.3, 18.35, 18.4, 18.45,
     18.5, 18.55, 18.6, 18.65, 18.7, 18.75, 18.8, 18.85, 18.9, 18.95, 19.0, 19.05, 19.1, 19.15, 19.2, 19.25, 19.3,
     19.35, 19.4, 19.45, 19.5, 19.55, 19.6, 19.65, 19.7, 19.75, 19.8, 19.85, 19.9, 19.95, 20.0, 20.05, 20.1, 20.15,
     20.2, 20.25, 20.3, 20.35, 20.4, 20.45, 20.5, 20.55, 20.6, 20.65, 20.7, 20.75, 20.8, 20.85, 20.9, 20.95, 21.0,
     21.05, 21.1, 21.15, 21.2, 21.25, 21.3, 21.35, 21.4, 21.45, 21.5, 21.55, 21.6, 21.65, 21.7, 21.75, 21.8, 21.85,
     21.9, 21.95, 22.0, 22.05, 22.1, 22.15, 22.2, 22.25, 22.3, 22.35, 22.4, 22.45, 22.5, 22.55, 22.6, 22.65, 22.7])
javeir_betas = np.array(
    [0.5332319963291807, 0.559893481203247, 0.5865549596377401, 0.6132164323815853, 0.639877900049246,
     0.6665393632248025, 0.6932008224258028, 0.7198622785317325, 0.7465237319961031, 0.7731851840475565,
     0.7998466340274161, 0.8265080835259118, 0.8531695331927766, 0.8798309835641861, 0.9064924352149974,
     0.9331538888599196, 0.95981534452526, 0.986476804858515, 1.0131382686090402, 1.0397997367837553,
     1.0664612103755617, 1.093122690090563, 1.119784176451307, 1.1464456702400427, 1.1731071720721877,
     1.1997686828194218, 1.2264302029968586, 1.2530917338806218, 1.279753274708036, 1.3064148276216696,
     1.333076392964553, 1.3597379714479931, 1.3863995637686473, 1.4130611706417229, 1.4397227928994993,
     1.4663844312933438, 1.4930460866137325, 1.5197077594491808, 1.546369450774552, 1.5730311614280892,
     1.599692892098026, 1.626354643634388, 1.653016416426517, 1.6796782127484289, 1.7063400318266522,
     1.7330018752799952, 1.7596637438512912, 1.7863256385312714, 1.812987560079353, 1.8396495095256273,
     1.8663114878397655, 1.8929734959049505, 1.9196355350966183, 1.9462976056463477, 1.9729597092383764,
     1.999621846897173, 2.026284019486674, 2.052946228353555, 2.0796084745929195, 2.1062707594818932,
     2.1329330842919947, 2.15959545039599, 2.1862578591136566, 2.212920311973144, 2.239582810560588, 2.2662453564599123,
     2.292907951354409, 2.319570597331864, 2.346233296251209, 2.372896050305421, 2.399558861913446, 2.4262217339039,
     2.452884668266481, 2.479547669170204, 2.5062107396799345, 2.5328738841460656, 2.5595371069610544,
     2.5862004136416803, 2.6128638101367545, 2.639527304038481, 2.6661909039307994, 2.6928546206654635,
     2.7195184673282444, 2.7461824599937583, 2.7728466197692687, 2.7995109734992067, 2.82617555681033,
     2.8528404183782587, 2.8795056260125937, 2.9061712779938333, 2.9328375217897658, 2.9595045912880273,
     2.986172879605036, 3.0128431048645608, 3.0395167346084504, 3.0661973115417167, 3.0928961407917797,
     3.119679559367768, 3.144915911631079, 3.172636340183029, 3.1993717941427784, 3.2260623799871833,
     3.2527404798245807, 3.279413390720523, 3.3060836763720522, 3.3327524705067675, 3.359420352314756,
     3.3860876486197036, 3.412754558593193, 3.4394212102872848, 3.4660876903691853, 3.492754059530305,
     3.519420361775563, 3.546086630094515, 3.572752889509062, 3.5994191596245986, 3.626085456178356, 3.6527517918564074,
     3.6794181773664567, 3.706084621547121, 3.732751132114179, 3.7594177156288526, 3.786084377402441, 3.81275112442333,
     3.8394179596419855, 3.8660848880025074, 3.8927519134766553, 3.9194190397798696, 3.9460862705996718,
     3.972753609163883, 3.9994210589551367, 4.02608862247375, 4.0527563032241085, 4.079424104151515, 4.106092027991712,
     4.1327600781105405, 4.159428256106114, 4.186096565986773, 4.212765010110144, 4.239433591287855, 4.266102312360454,
     4.292771176065447, 4.31944018522544, 4.346109342854397, 4.372778651625863, 4.39944811463505, 4.426117734547358,
     4.452787514636974, 4.479457457759655, 4.506127566732991, 4.532797845518109, 4.559468296475903, 4.586138923125633,
     4.612809728625597, 4.639480716590747, 4.666151890243134, 4.692823253182406, 4.719494808873332, 4.746166560958089,
     4.772838513432057, 4.799510669896902, 4.826183034304432, 4.852855610741017, 4.8795284033471695, 4.906201416231793,
     4.932874653929263, 4.959548120773971, 4.986221821602456, 5.012895760963837, 5.03956994378239, 5.066244375183849,
     5.0929190603845385, 5.1195940049335045, 5.146269214152731, 5.172944694128932, 5.199620450803201, 5.226296490410244,
     5.252972819712273, 5.279649445397526, 5.306326374641777, 5.333003615178696, 5.359681174563817, 5.386359061421837,
     5.413037284463838, 5.439715853186084, 5.466394777511472, 5.493074067943799, 5.519753736290188, 5.546433794759325,
     5.573114256750192, 5.599795137281864, 5.626476452248635, 5.653158219528002, 5.679840459352773, 5.706523194434665,
     5.73320645024232, 5.759890256532532, 5.7865746478606646, 5.8132596649405714, 5.839945356444131, 5.866631781727808,
     5.893319014175717, 5.920007146375648, 5.946696297398658, 5.9733866246682155, 6.000078340843866, 6.026771744459682,
     6.0534672661839055, 6.080165560252325, 6.106867669267109, 6.133575372706217, 6.160291987323155, 6.187024502951685,
     6.213790662208073, 6.240652809320533, 6.2681088504250715, 6.291591161892097, 6.3197658571345166, 6.346676550127181,
     6.373458865665192, 6.4002014011442725, 6.426926744086063, 6.453643319435139, 6.480354994770947, 6.507063800758318,
     6.533770911183842, 6.560477055781122, 6.587182715823958, 6.61388822479198, 6.640593823619413, 6.667299693833611,
     6.694005976475489, 6.720712784906684, 6.7474202145601145, 6.77412834493911, 6.800837247366626, 6.827546985104916,
     6.8542576170893845, 6.880969197921103, 6.907681780289119, 6.934395414843453, 6.96111015121224, 6.987826038853667,
     7.014543127250998, 7.041261465628868, 7.067981105174987, 7.094702097358894, 7.121424494915336, 7.148148352129445,
     7.174873725554312, 7.201600673255873, 7.228329255685329, 7.255059535606872, 7.2817915786333725, 7.308525453204142,
     7.335261230945389, 7.3619989865005415, 7.38873879872876, 7.415480749954042, 7.442224926881472, 7.468971420684753,
     7.495720327475017, 7.522471748614528, 7.549225790737927, 7.575982566831079, 7.6027421964968855, 7.629504805738119,
     7.656270528941167, 7.683039507778423, 7.709811893107091, 7.736587845539494, 7.763367535190025, 7.790151143863028,
     7.816938865216137, 7.843730905781911, 7.870527486629759, 7.897328844020059, 7.9241352310593784, 7.950946919227509,
     7.977764200793765, 8.004587388831352, 8.03141682118579, 8.058252862253443, 8.085095905874011, 8.111946377152865,
     8.138804738085287, 8.165671489162909, 8.192547174975875, 8.219432389464206, 8.246327778018134, 8.273234050835043,
     8.300151983334171, 8.327082428122205, 8.354026324003355, 8.380984706643167, 8.407958722552783, 8.434949643556687,
     8.461958885067176, 8.4889880264405, 8.516038836569708, 8.543113302557657, 8.570213664937071, 8.597342460410026,
     8.624502571851734, 8.651697291136026, 8.678930394394946, 8.70620623591776, 8.733529864486913, 8.760907169836125,
     8.788345066984961, 8.815851734211885, 8.84343692017775, 8.871112346384558, 8.898892244615833, 8.926794081937345,
     8.95483955952577, 8.983056015958226, 9.011478446659916, 9.040152481808054, 9.069138953376433, 9.09852107771109,
     9.128416462334622, 9.158998172525726, 9.190534734618428, 9.223474144768304, 9.258648019241559, 9.297898201143779,
     9.347146963964246, 9.419457134311392, 9.42249359365205, 9.423352719644788, 9.42386405675267, 9.424250895000592,
     9.424586209494672, 9.424907275927731, 9.425243136175721, 9.425629387001766, 9.426132136106462, 9.426937211059114,
     9.429172224275428, 9.491213505701959, 9.544072457047244, 9.58441149321258, 9.620120608904715, 9.653377460219648,
     9.685122970171209, 9.715851891700389, 9.745856187144875, 9.775321967666631, 9.804374667857429, 9.833102486986476,
     9.861569552094865, 9.889823771924696, 9.917901755300889, 9.945832015368822, 9.973637125744226, 10.001335214457496,
     10.028941021595392, 10.056466665705686, 10.083922209532197, 10.111316082357021, 10.138655402743472,
     10.165946225583232, 10.193193735841612, 10.220402402090022, 10.24757609466085, 10.274718184721038,
     10.30183162326924, 10.32891900420932, 10.355982617699542, 10.383024493533728, 10.410046437340402,
     10.437050060721386, 10.46403680708354, 10.491007973423681, 10.517964727726804, 10.544908125494958,
     10.57183912275526, 10.598758587574782, 10.625667310162846, 10.652566010835155, 10.67945534914579,
     10.70633592857983, 10.733208303183591, 10.760072982724983, 10.786930436415632, 10.813781098014523,
     10.840625367813718, 10.867463617069182, 10.894296189727392, 10.921123405160749, 10.947945561072828,
     10.974762934334853, 11.001575783289683, 11.028384349385961, 11.055188858339621, 11.081989521813071,
     11.10878653834045, 11.135580093919932, 11.162370362451812, 11.18915751355087, 11.215941697828619,
     11.242723063759628, 11.269501750411642, 11.296277888392543, 11.323051602948526, 11.34982301165389,
     11.376592226982297, 11.403359356020363, 11.430124500417877, 11.456887755966012, 11.483649221105308,
     11.510408979919417, 11.5371671201997, 11.563923724725912, 11.590678873522773, 11.61743264401171, 11.64418511197495,
     11.67093635088692, 11.697686432975392, 11.724435430248581, 11.751183412807015, 11.777930451475951,
     11.804676616930697, 11.831421981616833, 11.858166618960857, 11.88491060541015, 11.911654020068386,
     11.938396947894292, 11.965139478953587, 11.991881713050207, 12.01862375830023, 12.045365737933032,
     12.072107792501486, 12.098850086030206, 12.125592813262262, 12.152336209790285, 12.179080567177234,
     12.205826253622062, 12.232573745507144, 12.25932367433623, 12.28607690265289, 12.312834644282615,
     12.339598672891723, 12.36637169906807, 12.393158091513309, 12.419965398496304, 12.446807908916538,
     12.473716415250214, 12.500771998315614, 12.52828270708838, 12.559393813657435, 12.573564151273773,
     12.604620882891762, 12.632125589495395, 12.659178554399286, 12.686084826499032, 12.712924950396038,
     12.73972955744936, 12.76651287313842, 12.793282413139934, 12.820042525910129, 12.846795906276666,
     12.873544315399988, 12.900288954858771, 12.927030673921655, 12.953770091756821, 12.980507670323922,
     13.007243763607427, 13.033978648828098, 13.060712540923165, 13.087445620958713, 13.114178033992529,
     13.140909896229795, 13.167641313091496, 13.194372369178197, 13.221103139117949, 13.247833687455582,
     13.274564070622615, 13.301294339501665, 13.328024538899923, 13.354754709625267, 13.381484888786868,
     13.40821511009051, 13.43494540509824, 13.461675802982333, 13.488406330972449, 13.515137015168241,
     13.541867879439577, 13.568598946976483, 13.595330240065516, 13.622061780043003, 13.648793587606752,
     13.67552568187757, 13.702258083223795, 13.72899081019345, 13.755723881098307, 13.782457314651099,
     13.809191128460212, 13.835925340245897, 13.862659967818521, 13.889395028452615, 13.916130539699077,
     13.942866518839377, 13.969602983234823, 13.996339949815438, 14.023077437163767, 14.049815461689409,
     14.076554041522508, 14.103293194384552, 14.130032931529747, 14.156773291197071, 14.183514271669832,
     14.210255898870741, 14.236998191115816, 14.263741168164907, 14.290484849749408, 14.317229255394889,
     14.343974406197336, 14.3707203229994, 14.397467027918456, 14.424214542112193, 14.450962888828542,
     14.477712091481614, 14.504462174268243, 14.53121316210908, 14.55796508071492, 14.584717957045106,
     14.611471818926123, 14.638226695260945, 14.664982616484219, 14.691739614327297, 14.718497721903516,
     14.745256974372046, 14.772017408803974, 14.798779064388391, 14.825541982383971, 14.852306207652374,
     14.879071787855464, 14.905838774336294, 14.932607222616644, 14.9593771932786, 14.98614874969844,
     15.012921973507307, 15.039696936949115, 15.066473733617043, 15.093252465572615, 15.12003324919771,
     15.14681621760254, 15.173601525297972, 15.200389354551106, 15.227179920633246, 15.25397348234428,
     15.280770358696723, 15.307570942038437, 15.334375729087741, 15.361185363434414, 15.388000685995323,
     15.414822836949522, 15.441653399567592, 15.468494649120366, 15.49534998860131, 15.522224764599558,
     15.549127907779127, 15.576075586938604, 15.603100489423914, 15.630280436313319, 15.65785914894314,
     15.687229073970231, 15.708303786592657, 15.731720971624384, 15.760728585532307, 15.788258308585988,
     15.815433951384366, 15.84247038071029, 15.86943859963064, 15.896369018842561, 15.9232768816166, 15.950170697186412,
     15.977055609266115, 16.003934924058985, 16.030810881163635, 16.057685059329078, 16.084558616855524,
     16.111432432687792, 16.13830719258597, 16.165183449400384, 16.19206166080783, 16.218942214956716,
     16.245825449335552, 16.272711664898644, 16.299601134733766, 16.32649411187988, 16.353390835302623,
     16.380291533004907, 16.40719642712301, 16.434105735399783, 16.461019673797136, 16.487938459134625,
     16.514862309185744, 16.54179144547567, 16.568726093783894, 16.595666485975375, 16.62261286127701,
     16.64956546519972, 16.676524553378506, 16.703490391274617, 16.730463255127503, 16.75744343322241,
     16.784431226439814, 16.811426950930382, 16.838430937219204, 16.86544353270338, 16.892465103349565,
     16.919496033551066, 16.946536729202855, 16.9735876184532, 17.000649153720822, 17.02772181358738, 17.05480610555018,
     17.08190256672116, 17.10901176819354, 17.136134315287563, 17.16327085383899, 17.190422070862788,
     17.217588698501626, 17.24477151953842, 17.271971369136494, 17.299189142671516, 17.326425798953732,
     17.353682366812077, 17.380959952339264, 17.40825974545154, 17.435583028778147, 17.46293118693605,
     17.490305716059563, 17.51770823807175, 17.545140511173056, 17.572604446979536, 17.600102127168388,
     17.627635823005992, 17.655208018478696, 17.682821433322474, 17.710479058897977, 17.73818418647511,
     17.765940449996908, 17.793751872537808, 17.821622920058317, 17.84955856753827, 17.877564371713348,
     17.905646566577435, 17.933812161682898, 17.96206908693485, 17.990426339479562, 18.01889417035268,
     18.047484342244655, 18.076210401372848, 18.10508805609398, 18.134135639932733, 18.16337470595019,
     18.19283079975941, 18.222534472252484, 18.252522635119664, 18.282840398757905, 18.31354362780565,
     18.344702567853282, 18.37640713498658, 18.40877490024575, 18.44196359709153, 18.47619169641354, 18.511774294030268,
     18.54919104691194, 18.58922803752601, 18.633325310518657, 18.68465952395024, 18.753579561708573,
     18.831638767611977, 18.839847861847662, 18.842601384971218, 18.844174802991912, 18.845268069098474,
     18.846112511700813, 18.84681068706167, 18.847416666764694, 18.847962660556053, 18.848469857298333,
     18.848953541135593, 18.84942583437466, 18.849897388478908, 18.85037864005077, 18.850880999323454,
     18.851418301815816, 18.852008992883103, 18.85267995780131, 18.853474136217155, 18.85446778624846,
     18.855816839934512, 18.85791757592192, 18.86230058595633, 18.89227839663552, 18.98287290134215, 19.040781125261635,
     19.08798161850987, 19.12985605355838, 19.168494850919487, 19.204950662804116, 19.239834077300205,
     19.273532669676925, 19.306308412709633, 19.338346817366748, 19.369784045752937, 19.400722942731566,
     19.431243021829676, 19.46140696987877, 19.49126502703239, 19.52085803684875, 19.550219610261482,
     19.579377713181977, 19.608355834163323, 19.637173872558037, 19.66584881672014, 19.694395271108394,
     19.722825871280616, 19.751151610199035, 19.77938210544524, 19.807525812517554, 19.835590194842933,
     19.863581872452766, 19.891506738069637, 19.919370056743933, 19.947176547958865, 19.97493045727659,
     20.002635599399394, 20.03029548031226, 20.057913200857232, 20.085491632210225, 20.113033379198733,
     20.140540821139492, 20.16801613730613, 20.195461327064006, 20.222878224259876, 20.250268534644444,
     20.277633806830032, 20.30497549196503, 20.332294924668318, 20.359593345966267, 20.386871907381515,
     20.41413168079194, 20.441373664824567, 20.468598791512076, 20.495807928943695, 20.523001893189726,
     20.550181446447915, 20.57734730392953, 20.604500137167026, 20.631640578571563, 20.658769222471005,
     20.68588663046145, 20.712993330497778, 20.7400898150078, 20.767176587316577, 20.794254065392508, 20.82132268553939,
     20.84838285319787, 20.875434953686668, 20.90247935515845, 20.929516408818834, 20.95654645057352,
     20.983569803540718, 21.010586777428923, 21.037597671847774, 21.064602775928062, 21.091602370237002,
     21.118596727803876, 21.14558611599737, 21.17257079651675, 21.199551033373048, 21.226527080554582,
     21.25349919930459, 21.28046765123423, 21.307432703434912])
javeir_betas = javeir_betas[:len(jav_fr)]
javeir_betas /= unit_cell_length





plt.plot(javeir_betas)
plt.plot(utills.functions.beta_unfold(get_betas_d(floquet_line, jav_fr)) / unit_cell_length)
plt.show()


fig, ax = plt.subplots()
plt.suptitle(f"Frequency Pump: {PUMP_FREQUENCY / 1e9} GHz")
colors = ["orange", "blue"]
symbols = ["-", '--']
for i in range(2):

    z_eval = np.linspace(0, unit_cell_length * n_unitcells, len(frequency_range))
    z_span = (z_eval[0], z_eval[-1])
    power_gain, gain_idler, gain_pump = [], [], []

    # get betas for pump, idler, delta, and  betas
    betas_signal = betas_unfolded
    betas_pump = __get_closest_betas_at_given_freq(frequency_range, [PUMP_FREQUENCY] * len(frequency_range), betas_unfolded)
    betas_idler = __get_closest_betas_at_given_freq(frequency_range, (2 * PUMP_FREQUENCY - frequency_range),
                                                    betas_unfolded)
    delta_betas = betas_signal + betas_idler - 2 * betas_pump

    for f_idx in range(len(frequency_range)):

        args = (betas_signal[f_idx], betas_idler[f_idx], betas_pump[f_idx], delta_betas[f_idx], I_star)
        sol = solve_ivp(fun=ODE_model_1, t_span=z_span, y0=inital_amplitudes, args=args, t_eval=z_eval,
                        method='RK45')  # BDF
        amplitude_signal_over_z_range, amplitude_idler_over_z_range, amplitude_pump_over_z_range = sol.y

        # todo could be somthing weird or the sol.y
        signal_amplitude_before = amplitude_signal_over_z_range[0]
        signal_amplitude_after = amplitude_signal_over_z_range[-1]

        power_gain.append(20 * np.log10(abs(signal_amplitude_after) / abs(signal_amplitude_before)))

        if f_idx % (len(frequency_range) // 10) == 0:
            print(f"{int(f_idx / len(frequency_range) * 100)}% complete")

    ax.plot(frequency_range / 1e9, power_gain, f'{symbols[i]}', color=f'tab:{colors[i]}')

    betas_unfolded = javeir_betas
    frequency_range = jav_fr

ax.set_ylim([None, None])

ax.set_title(f"SIGNAL GAIN [20*log10]")
fig.set_size_inches(7, 7)
ax.set_xlabel('Frequency [GHz]')
plt.show()
